% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/C_Object.R
\name{C_Object}
\alias{C_Object}
\title{CHSM object reference}
\description{
An R6 class mapping to a C++ object

  Implementation is provided by C++ objects.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{.external}}{The external pointer to the associated C++ Cell object}

\item{\code{cClassName}}{The name of the C class}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-C_Object-new}{\code{C_Object$new()}}
\item \href{#method-C_Object-callFunction}{\code{C_Object$callFunction()}}
\item \href{#method-C_Object-clone}{\code{C_Object$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-C_Object-new"></a>}}
\if{latex}{\out{\hypertarget{method-C_Object-new}{}}}
\subsection{Method \code{new()}}{
Constructs an object that is a new instance of the class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{C_Object$new(className, ..., regFinalizer = NULL, .external = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{className}}{The name of the of the C class being mapped}

\item{\code{...}}{Abstract arguments to be passed to the C++ constructor for the
provided class name}

\item{\code{regFinalizer}}{Logical to indicate if a finalizer should be registered (TRUE)
or not (FALSE).
Registering a finalizer will cause the C deconstructor to be called
when the object goes out of scope in R.
A finalizer should not be registered unless R is considered to own
the object, rather than the object being owned by another object in
C.}

\item{\code{.external}}{(Optional) If an external pointer is provided instead of the default
NULL value, then the new R6 object will be associated with the 
existing C++ Object referenced by the pointer.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-C_Object-callFunction"></a>}}
\if{latex}{\out{\hypertarget{method-C_Object-callFunction}{}}}
\subsection{Method \code{callFunction()}}{
Call a C function representing one of the methods of the class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{C_Object$callFunction(fun, ..., cClassName = self$cClassName)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{Character string with the name of the method to be called}

\item{\code{...}}{SEXP arguments to be passed on to the C function}

\item{\code{cClassName}}{(Optional) A character string representing the C class name for the
  function to be called.
Defaults to the C class name associated with the derived class.
This should be changed if the function associated with a base class
  needs to be called.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
SEXP object returned by the function.
  If the object is a character string starting with "<CERROR>", the
    program will be stopped with the error message provided from C.
  A null return value will be returned invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-C_Object-clone"></a>}}
\if{latex}{\out{\hypertarget{method-C_Object-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{C_Object$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
